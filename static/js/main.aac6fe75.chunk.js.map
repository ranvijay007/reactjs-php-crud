{"version":3,"sources":["components/addUser.js","components/userList.js","App.js","serviceWorker.js","index.js"],"names":["AddUser","useState","name","email","users","setUsers","className","onSubmit","e","preventDefault","Axios","post","then","data","success","alert","msg","type","value","onChange","target","placeholder","required","UserList","editHandler","deleteHandler","useEffect","fetch","response","json","reverse","map","user","index","key","id","user_name","user_email","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"ySAwDeA,EApDC,WAAO,IAAD,EACMC,mBAAS,CAAEC,KAAM,GAAIC,MAAO,KADlC,mBACbC,EADa,KACNC,EADM,KAcpB,OACE,yBAAKC,UAAU,yBACb,wBAAIA,UAAU,kCAAd,YACA,0BAAMC,SAfU,SAACC,GACnBA,EAAEC,iBACFC,IAAMC,KAAK,gDAAiDP,GAAOQ,MACjE,YAAe,IAAZC,EAAW,EAAXA,KACoB,IAAjBA,EAAKC,SACPT,EAAS,CAAEH,KAAM,GAAIC,MAAO,KAC5BY,MAAMF,EAAKG,MACND,MAAMF,EAAKG,SAQSV,UAAU,iCACrC,yBAAKA,UAAU,QACb,2BACEW,KAAK,OACLf,KAAK,OACLgB,MAAOd,EAAMF,KACbiB,SAAU,SAACX,GACTH,EAAS,2BAAKD,GAAN,IAAaF,KAAMM,EAAEY,OAAOF,UAEtCZ,UAAU,eACVe,YAAY,kBACZC,UAAQ,KAGZ,yBAAKhB,UAAU,QACb,2BACEW,KAAK,QACLf,KAAK,QACLgB,MAAOd,EAAMD,MACbgB,SAAU,SAACX,GACTH,EAAS,2BAAKD,GAAN,IAAaD,MAAOK,EAAEY,OAAOF,UAEvCZ,UAAU,eACVe,YAAY,mBACZC,UAAQ,KAGZ,6BACE,2BAAOL,KAAK,SAASX,UAAU,kBAAkBY,MAAM,YCDlDK,EA7CE,WAAO,IAAD,EACKtB,mBAAS,IADd,mBACdG,EADc,KACPC,EADO,KAEfmB,EAAc,aACdC,EAAgB,aAQtB,OAPAC,qBAAU,WACRC,MAAM,iDAAiDf,MAAK,SAACgB,GAC3DA,EAASC,OAAOjB,MAAK,SAACC,GACpBR,EAASQ,EAAKT,MAAM0B,oBAKxB,yBAAKxB,UAAU,eACb,wBAAIA,UAAU,qBAAd,YACA,2BAAOA,UAAU,kCACf,2BAAOA,UAAU,eACf,4BACE,oCACA,oCACA,qCACA,wCAGJ,+BACGF,EAAM2B,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKF,EAAKG,IACZ,4BAAKF,EAAQ,GACb,4BAAKD,EAAKI,WACV,4BAAKJ,EAAKK,YACV,4BACE,4BAAQ/B,UAAU,kBAAkBgC,QAASd,GAA7C,QAEU,IACV,4BAAQlB,UAAU,iBAAiBgC,QAASb,GAA5C,mBCvBDc,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aac6fe75.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Axios from \"axios\";\r\n\r\nconst AddUser = () => {\r\n  const [users, setUsers] = useState({ name: \"\", email: \"\" });\r\n  const formHandler = (e) => {\r\n    e.preventDefault();\r\n    Axios.post(\"http://localhost:8080/php-react/add-users.php\", users).then(\r\n      ({ data }) => {\r\n        if (data.success === 1) {\r\n          setUsers({ name: \"\", email: \"\" });\r\n          alert(data.msg);\r\n        } else alert(data.msg);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-center pt-5 pb-4\">\r\n      <h1 className=\"text-warning font-weight-light\">Add User</h1>\r\n      <form onSubmit={formHandler} className=\"d-flex justify-content-center\">\r\n        <div className=\"pr-2\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={users.name}\r\n            onChange={(e) => {\r\n              setUsers({ ...users, name: e.target.value });\r\n            }}\r\n            className=\"form-control\"\r\n            placeholder=\"Enter your Name\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"pr-2\">\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={users.email}\r\n            onChange={(e) => {\r\n              setUsers({ ...users, email: e.target.value });\r\n            }}\r\n            className=\"form-control\"\r\n            placeholder=\"Enter your Email\"\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Add\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst UserList = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const editHandler = () => {};\r\n  const deleteHandler = () => {};\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:8080/php-react/user-list.php\").then((response) => {\r\n      response.json().then((data) => {\r\n        setUsers(data.users.reverse());\r\n      });\r\n    });\r\n  });\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1 className=\"font-weight-light\">UserList</h1>\r\n      <table className=\"table block-center table-hover\">\r\n        <thead className=\"thead-light\">\r\n          <tr>\r\n            <th>S.No</th>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user, index) => (\r\n            <tr key={user.id}>\r\n              <td>{index + 1}</td>\r\n              <td>{user.user_name}</td>\r\n              <td>{user.user_email}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning\" onClick={editHandler}>\r\n                  Edit\r\n                </button>{\" \"}\r\n                <button className=\"btn btn-danger\" onClick={deleteHandler}>\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AddUser from \"./components/addUser\";\nimport UserList from \"./components/userList\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AddUser />\n      <UserList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}